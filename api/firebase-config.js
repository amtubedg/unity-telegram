import { initializeApp, cert } from "firebase-admin/app";
import { getFirestore } from "firebase-admin/firestore";
import { doc, getDoc, setDoc, updateDoc } from "firebase/firestore";

const serviceAccount = JSON.parse(process.env.FIREBASE_ADMIN_KEY);

const app = initializeApp({
  credential: cert(serviceAccount)
});

const db = getFirestore();

export default async (req, res) => {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: "Method Not Allowed" });
  }
  const { userId, username } = req.body;
  if (!userId || !username) {
    console.log("‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ:", req.body);
    return res.status(400).json({ error: "Missing data" });
  }
  try {
    console.log("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", { userId, username });

    await db.collection("users").doc(userId).set({
      TelegramID: userId,
      Username: username
    });
    console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ Firestore");
    res.status(200).json({ success: true });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Firestore:", err.message);
    res.status(500).json({ error: err.message });
  }
};

async function sendScore(userId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º score —á–µ—Ä–µ–∑ prompt
    const score = parseInt(prompt("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Score:"), 10);

    if (isNaN(score)) {
      alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
      return;
    }

    const userDocRef = doc(db, "users", userId);
    const userDoc = await getDoc(userDocRef);

    if (userDoc.exists()) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º Score
      await updateDoc(userDocRef, {
        Score: score
      });
      alert(`Score —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: ${score}`);
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ —Å Score
      await setDoc(userDocRef, {
        TelegramID: userId,
        Score: score
      });
      alert(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å Score: ${score}`);
    }
    console.log(`‚úÖ Score –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Firestore: ${score}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Score:", error);
    alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Score.");
  }
}

if (userId) {
  sendScore(userId);
} else {
  console.error("–û—à–∏–±–∫–∞: UserID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
}